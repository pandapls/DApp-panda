import puppeteer from 'puppeteer';
import Infrastructure from './infrastructure';
export default class Page extends Infrastructure {
    goto(url: string): this;
    newPage(name?: string, options?: {
        force?: boolean;
        stayCurrent?: boolean;
    }): this;
    switchPage(name: string | number): this;
    closePage(name?: string): this;
    pagesCount(): Promise<number>;
    forward(options?: puppeteer.NavigationOptions): this;
    back(options?: puppeteer.NavigationOptions): this;
    refresh(options?: puppeteer.NavigationOptions): this;
    evaluate<Arg extends any[]>(fn: ((...args: Arg) => void) | string, ...args: Arg): this;
    evaluateWithReturn<Arg extends any[], Ret = any>(fn: ((...args: Arg) => Ret) | string, ...args: Arg): Promise<Ret>;
    withUserAgent(userAgent: string): this;
    saveScreenshot(path: string, options?: puppeteer.ScreenshotOptions): this;
    savePDF(path: string, options?: puppeteer.PDFOptions): this;
    waitForNavigation(timeout?: number): this;
    waitForElement(selector: string, timeout?: number): this;
    waitForEvaluation<Arg extends any[]>(fn: string | ((...args: Arg) => void), timeout?: number, ...args: Arg): this;
    withAuth(username: string, password: string): this;
    withHeaders(headers: puppeteer.Headers): this;
    addScriptTag(type: 'url' | 'path' | 'content', value: string, options?: {
        esModule: boolean;
    }): this;
    addStyleTag(type: keyof puppeteer.StyleTagOptions, value: string): this;
}
